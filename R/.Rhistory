} //sumsigma function
NumericVector sumSigma_apply(  NumericVector sd, NumericVector dof, NumericVector Indexes){
 return sapply(sd,dof,geneSets,sumsigma);
}
RCPP_MODULE(modsigma) {
    function("sumsigma", &sumsigma);
    function("sumSigma_apply", &sumSigma_apply);
} //exposing module
'
fx <- cxxfunction(signature(), plugin="Rcpp", include=src)
src<- 'using namespace Rcpp;
double sumsigma( NumericVector sd, NumericVector dof, NumericVector Indexes ) {
NumericVector SD = sd[Indexes-1];
NumericVector DOF = dof[Indexes-1];
return sqrt(sum((SD*SD)*(DOF/(DOF-2))));
} //sumsigma function
NumericVector sumSigma_apply(  NumericVector sd, NumericVector dof, NumericVector Indexes){
 return sapply(sd,dof,Indexes,sumsigma);
}
RCPP_MODULE(modsigma) {
    function("sumsigma", &sumsigma);
    function("sumSigma_apply", &sumSigma_apply);
} //exposing module
'
fx <- cxxfunction(signature(), plugin="Rcpp", include=src)
src<- 'using namespace Rcpp;
double sumsigma( NumericVector sd, NumericVector dof, NumericVector geneSets ) {
NumericVector Indexes = geneSets
NumericVector SD = sd[Indexes-1];
NumericVector DOF = dof[Indexes-1];
return sqrt(sum((SD*SD)*(DOF/(DOF-2))));
} //sumsigma function
List sumSigmaApply(  NumericVector sd, NumericVector dof, List gList){
 return lapply(sd,dof,gList,sumsigma);
}
RCPP_MODULE(modsigma) {
    function("sumsigma", &sumsigma);
    function("sumSigmaApply", &sumSigmaApply);
} //exposing module
'
fx <- cxxfunction(signature(), plugin="Rcpp", include=src)
src<- 'using namespace Rcpp;
double sumsigma( NumericVector sd, NumericVector dof, NumericVector geneSets ) {
NumericVector Indexes = geneSets;
NumericVector SD = sd[Indexes-1];
NumericVector DOF = dof[Indexes-1];
return sqrt(sum((SD*SD)*(DOF/(DOF-2))));
} //sumsigma function
List sumSigmaApply(  NumericVector sd, NumericVector dof, List gList){
 return lapply(sd,dof,gList,sumsigma);
}
RCPP_MODULE(modsigma) {
    function("sumsigma", &sumsigma);
    function("sumSigmaApply", &sumSigmaApply);
} //exposing module
'
fx <- cxxfunction(signature(), plugin="Rcpp", include=src)
src<- 'using namespace Rcpp;
NumericVector sumsigma( NumericVector sd, NumericVector dof, List geneSets ) {
NumericVector output(geneSets.size());
for(int i = 0 ; i < geneSets.size() ; i++) {
SEXP nn = geneSets[i];
NumericVector Indexes(nn);
NumericVector SD = sd[Indexes-1];
NumericVector DOF = dof[Indexes-1];
output[i]= sqrt(sum((SD*SD)*(DOF/(DOF-2))));
   }
 return output;
} //sumsigma function
//List sumSigmaApply( List gList){
// return lapply(gList,sumsigma(sd, dof, );
//}
RCPP_MODULE(modsigma) {
    function("sumsigma", &sumsigma);
} //exposing module
'
fx <- cxxfunction(signature(), plugin="Rcpp", include=src)
ss <- Module("modsigma", getDynLib(fx))
ss$sumsigma(SD,DOF,multiSets)
ss$sumsigma(SD,DOF,multiSets)->test
test
names(test)
names(test)<-c("t","tt","ttt")
test
microbenchmark(
ss$sumsigma(SD,DOF,multiSets),times=5000)
src<- 'using namespace Rcpp;
NumericVector sumsigma( NumericVector sd, NumericVector dof, List geneSets ) {
NumericVector output(geneSets.size());
for(int i = 0 ; i < geneSets.size() ; i++) {
SEXP nn = geneSets[i];
NumericVector Indexes(nn);
NumericVector SD(sd[Indexes-1]);
NumericVector DOF = dof[Indexes-1];
output[i]= sqrt(sum((SD*SD)*(DOF/(DOF-2))));
   }
 return output;
} //sumsigma function
//List sumSigmaApply( List gList){
// return lapply(gList,sumsigma(sd, dof, );
//}
RCPP_MODULE(modsigma) {
    function("sumsigma", &sumsigma);
} //exposing module
'
fx <- cxxfunction(signature(), plugin="Rcpp", include=src)
getwd()
sourceCpp("Zero.cpp")
sourceCpp("Zero.cpp")
z<-Zero$(SD,DOF,geneSets)
z<-Zero$new(SD,DOF,geneSets)
zero<-'class Zero {
public:
     Zero(NumericVector sd_, NumericVector dof_, List geneSets_) : sd(sd_) ,dof(dof_), geneSets(geneSets_){}
NumericVector sumsigma( NumericVector sd, NumericVector dof, List geneSets ) {
NumericVector output(geneSets.size());
for(int i = 0 ; i < geneSets.size() ; i++) {
SEXP nn = geneSets[i];
NumericVector Indexes(nn);
NumericVector SD = sd[Indexes-1];
NumericVector DOF = dof[Indexes-1];
output[i]= sqrt(sum((SD*SD)*(DOF/(DOF-2))));
   }
 return output;
} //sumsigma function
NumericVector mindof( NumericVector dof, List geneSets ) {
NumericVector outputDof(geneSets.size());
for(int i = 0 ; i < geneSets.size(); i++){
SEXP mm = geneSets[i];
NumericVector Indexes(mm);
NumericVector DOF = dof[Indexes-1];
outputDof[i] = floor(min(DOF));
  }
return outputDof;
} //minDof
NumericVector sd , dof, geneSets;
};
RCPP_MODULE(sumSigma_minDof){
class_<Zero>("Zero")
.constructor<NumericVector,NumericVector,List>()
.field("sd", &Zero::sd)
.field("dof", &Zero::dof)
.field("geneSets", &Zero::geneSets)
.method("sumsigma", &Zero::sumsigma)
.method("mindof", &Zero::mindof)
;
}
'
fz<-cxxfunction(signature(),plugin="Rcpp",include=zero)
zeroMod<-Module("sumSigma_minDof",getDynLig(fz))
zeroMod<-Module("sumSigma_minDof",getDynLib(fz))
Zero<-zeroMod$Zero
z<-new(Zero,SD,DOF,geneSets)
class(SD)
class(DOF)
class(geneSets)
z<-new(Zero,SD,DOF,multiSets)
src<-'using namespace Rcpp;
class Zero {
public:
     Zero(NumericVector sd_, NumericVector dof_, List geneSets_) : sd(sd_) ,dof(dof_), geneSets(geneSets_){}
NumericVector sumsigma( NumericVector sd, NumericVector dof, List geneSets ) {
NumericVector output(geneSets.size());
for(int i = 0 ; i < geneSets.size() ; i++) {
SEXP nn = geneSets[i];
NumericVector Indexes(nn);
NumericVector SD = sd[Indexes-1];
NumericVector DOF = dof[Indexes-1];
output[i]= sqrt(sum((SD*SD)*(DOF/(DOF-2))));
   }
 return output;
} //sumsigma function
NumericVector mindof( NumericVector dof, List geneSets ) {
NumericVector outputDof(geneSets.size());
for(int i = 0 ; i < geneSets.size(); i++){
SEXP mm = geneSets[i];
NumericVector Indexes(mm);
NumericVector DOF = dof[Indexes-1];
outputDof[i] = floor(min(DOF));
  }
return outputDof;
} //minDof
NumericVector sd, dof;
List geneSets;
};
RCPP_MODULE(sumSigma_minDof){
class_<Zero>("Zero")
.constructor<NumericVector,NumericVector,List>()
.field("sd", &Zero::sd)
.field("dof", &Zero::dof)
.field("geneSets", &Zero::geneSets)
.method("sumsigma", &Zero::sumsigma)
.method("mindof", &Zero::mindof)
;
}
'
fz<-cxxfunction(signature(),plugin="Rcpp",include=src)
zero_Module<-Module("sumSigma_minDof",getDynLib(fz))
Zero<-zero_Module$Zero
z<-new(Zero,SD,DOF,geneSets)
z
z$sumsigma(SD,DOF,geneSets)
z$sumsigma(SD,DOF,multiSets)
z$mindof(SD,DOF,multiSets)
z$mindof(DOF,multiSets)
microbenchmark(
z$sumsigma(SD,DOF,multiSets),
z$mindof(DOF,multiSets),
 SumSigma<-sapply(names(geneSets),function(i){
      Indexes = geneSets[[i]]
      x<-sqrt(sum((SD^2*(DOF/(DOF-2)))[Indexes]))
      return(x)
  })
,
SumSigma_MinDof<-aggregategsSumSigma(geneResults$SD,geneResults$dof,multiSets),
times=5000)
 SumSigma_MinDof<-aggregategsSumSigma(geneResults$SD,geneResults$dof,geneSets)
SumSigma_MinDof
 SumSigma_MinDof<-aggregategsSumSigma(geneResults$SD,geneResults$dof,multiSets)
SumSigma_MinDof
src<-'using namespace Rcpp;
class Zero {
public:
     Zero(NumericVector sd_, NumericVector dof_, List geneSets_) : sd(sd_) ,dof(dof_), geneSets(geneSets_){}
NumericVector sumsigma( NumericVector sd, NumericVector dof, List geneSets ) {
NumericVector output(geneSets.size());
for(int i = 0 ; i < geneSets.size() ; i++) {
SEXP nn = geneSets[i];
NumericVector Indexes(nn);
NumericVector SD = sd[Indexes-1];
NumericVector DOF = dof[Indexes-1];
output[i]= sqrt(sum((SD*SD)*(DOF/(DOF-2))));
   }
 return output;
} //sumsigma function
NumericVector mindof( NumericVector dof, List geneSets ) {
NumericVector outputDof(geneSets.size());
for(int i = 0 ; i < geneSets.size(); i++){
SEXP mm = geneSets[i];
NumericVector Indexes(mm);
NumericVector DOF = dof[Indexes-1];
outputDof[i] = floor(min(DOF));
  } 
return outputDof;
} //minDof
NumericVector sumSigma_minDof( NumericVector sd, NumericVector dof, List geneSets ) {
NumericVector output(geneSets.size());
NumericVector finalDof(geneSets.size());
for(int i = 0 ; i < geneSets.size() ; i++) {
SEXP nn = geneSets[i];
NumericVector Indexes(nn);
NumericVector SD = sd[Indexes-1];
NumericVector DOF = dof[Indexes-1];
output[i]= sqrt(sum((SD*SD)*(DOF/(DOF-2))));
finalDof[i] = floor(min(DOF));
   }
 return List::create( Named("SumSigma") = output,
                      Named("MinDof") = finalDof);
} //sumsigma function
NumericVector sd, dof;
List geneSets;
};
RCPP_MODULE(sumSigma_minDof){
class_<Zero>("Zero")
.constructor<NumericVector,NumericVector,List>()
.field("sd", &Zero::sd)
.field("dof", &Zero::dof)
.field("geneSets", &Zero::geneSets)
.method("sumsigma", &Zero::sumsigma)
.method("mindof", &Zero::mindof)
.method("sumSigma_minDof", &Zero::sumSigma_minDof)
;
}
'
fz<-cxxfunction(signature(),plugin="Rcpp",include=src)
zero_Module<-Module("Sigma_Dof",getDynLib(fz))
system("clear")
src<-'using namespace Rcpp;
class Zero {
public:
     Zero(NumericVector sd_, NumericVector dof_, List geneSets_) : sd(sd_) ,dof(dof_), geneSets(geneSets_){}
NumericVector sumsigma( NumericVector sd, NumericVector dof, List geneSets ) {
NumericVector output(geneSets.size());
for(int i = 0 ; i < geneSets.size() ; i++) {
SEXP nn = geneSets[i];
NumericVector Indexes(nn);
NumericVector SD = sd[Indexes-1];
NumericVector DOF = dof[Indexes-1];
output[i]= sqrt(sum((SD*SD)*(DOF/(DOF-2))));
   }
 return output;
} //sumsigma function
NumericVector mindof( NumericVector dof, List geneSets ) {
NumericVector outputDof(geneSets.size());
for(int i = 0 ; i < geneSets.size(); i++){
SEXP mm = geneSets[i];
NumericVector Indexes(mm);
NumericVector DOF = dof[Indexes-1];
outputDof[i] = floor(min(DOF));
  } 
return outputDof;
} //minDof
List sumSigma_minDof( NumericVector sd, NumericVector dof, List geneSets ) {
NumericVector output(geneSets.size());
NumericVector finalDof(geneSets.size());
for(int i = 0 ; i < geneSets.size() ; i++) {
SEXP nn = geneSets[i];
NumericVector Indexes(nn);
NumericVector SD = sd[Indexes-1];
NumericVector DOF = dof[Indexes-1];
output[i]= sqrt(sum((SD*SD)*(DOF/(DOF-2))));
finalDof[i] = floor(min(DOF));
   }
 return List::create( Named("SumSigma") = output,
                      Named("MinDof") = finalDof);
} //sumsigma function
NumericVector sd, dof;
List geneSets;
};
RCPP_MODULE(sumSigma_minDof){
class_<Zero>("Zero")
.constructor<NumericVector,NumericVector,List>()
.field("sd", &Zero::sd)
.field("dof", &Zero::dof)
.field("geneSets", &Zero::geneSets)
.method("sumsigma", &Zero::sumsigma)
.method("mindof", &Zero::mindof)
.method("sumSigma_minDof", &Zero::sumSigma_minDof)
;
}
'
fz<-cxxfunction(signature(),plugin="Rcpp",include=src)
zero_Module<-Module("Sigma_Dof",getDynLib(fz))
Zero<-zero_Module$Zero
 z<-new(Zero,SD,DOF,geneSets)
Zero<-zero_Module$Zero
src<-'using namespace Rcpp;
 class Zero {
public:
     Zero(NumericVector sd_, NumericVector dof_, List geneSets_) : sd(sd_) ,dof(dof_), geneSets(geneSets_){}
NumericVector sumsigma( NumericVector sd, NumericVector dof, List geneSets ) {
NumericVector output(geneSets.size());
for(int i = 0 ; i < geneSets.size() ; i++) {
SEXP nn = geneSets[i];
NumericVector Indexes(nn);
NumericVector SD = sd[Indexes-1];
NumericVector DOF = dof[Indexes-1];
output[i]= sqrt(sum((SD*SD)*(DOF/(DOF-2))));
   }
 return output;
} //sumsigma function
NumericVector mindof( NumericVector dof, List geneSets ) {
NumericVector outputDof(geneSets.size());
for(int i = 0 ; i < geneSets.size(); i++){
SEXP mm = geneSets[i];
NumericVector Indexes(mm);
NumericVector DOF = dof[Indexes-1];
outputDof[i] = floor(min(DOF));
  }
return outputDof;
} //minDof
List sumSigma_minDof( NumericVector sd, NumericVector dof, List geneSets ) {
NumericVector output(geneSets.size());
NumericVector finalDof(geneSets.size());
for(int i = 0 ; i < geneSets.size() ; i++) {
SEXP nn = geneSets[i];
NumericVector Indexes(nn);
NumericVector SD = sd[Indexes-1];
NumericVector DOF = dof[Indexes-1];
output[i]= sqrt(sum((SD*SD)*(DOF/(DOF-2))));
finalDof[i] = floor(min(DOF));
   }
List out = List(output,finalDof);
 return out;
} //sumsigma function
NumericVector sd, dof;
List geneSets;
};
RCPP_MODULE(Sigma_Dof){
class_<Zero>("Zero")
.constructor<NumericVector,NumericVector,List>()
.field("sd", &Zero::sd)
.field("dof", &Zero::dof)
.field("geneSets", &Zero::geneSets)
.method("sumsigma", &Zero::sumsigma)
.method("mindof", &Zero::mindof)
.method("sumSigma_minDof", &Zero::sumSigma_minDof)
;
}
'
fz<-cxxfunction(signature(),plugin="Rcpp",include=src)
src<-'using namespace Rcpp;
 class Zero {
public:
     Zero(NumericVector sd_, NumericVector dof_, List geneSets_) : sd(sd_) ,dof(dof_), geneSets(geneSets_){}
NumericVector sumsigma( NumericVector sd, NumericVector dof, List geneSets ) {
NumericVector output(geneSets.size());
for(int i = 0 ; i < geneSets.size() ; i++) {
SEXP nn = geneSets[i];
NumericVector Indexes(nn);
NumericVector SD = sd[Indexes-1];
NumericVector DOF = dof[Indexes-1];
output[i]= sqrt(sum((SD*SD)*(DOF/(DOF-2))));
   }
 return output;
} //sumsigma function
NumericVector mindof( NumericVector dof, List geneSets ) {
NumericVector outputDof(geneSets.size());
for(int i = 0 ; i < geneSets.size(); i++){
SEXP mm = geneSets[i];
NumericVector Indexes(mm);
NumericVector DOF = dof[Indexes-1];
outputDof[i] = floor(min(DOF));
  }
return outputDof;
} //minDof
List sumSigma_minDof( NumericVector sd, NumericVector dof, List geneSets ) {
NumericVector output(geneSets.size());
NumericVector finalDof(geneSets.size());
for(int i = 0 ; i < geneSets.size() ; i++) {
SEXP nn = geneSets[i];
NumericVector Indexes(nn);
NumericVector SD = sd[Indexes-1];
NumericVector DOF = dof[Indexes-1];
output[i]= sqrt(sum((SD*SD)*(DOF/(DOF-2))));
finalDof[i] = floor(min(DOF));
   }
Rcpp::List out = Rcpp::List::create(output,finalDof);
 return out;
} //sumsigma function
NumericVector sd, dof;
List geneSets;
};
RCPP_MODULE(Sigma_Dof){
class_<Zero>("Zero")
.constructor<NumericVector,NumericVector,List>()
.field("sd", &Zero::sd)
.field("dof", &Zero::dof)
.field("geneSets", &Zero::geneSets)
.method("sumsigma", &Zero::sumsigma)
.method("mindof", &Zero::mindof)
.method("sumSigma_minDof", &Zero::sumSigma_minDof)
;
}
'
fz<-cxxfunction(signature(),plugin="Rcpp",include=src)
zero_Module<-Module("Sigma_Dof",getDynLib(fz))
Zero<-zero_Module$Zero
new(Zero,SD,DOF,geneSets)
z<-new(Zero,SD,DOF,geneSets)
t<-z$sumSigma_minDof(SD,DOF,geneSets)
t
t<-z$sumSigma_minDof(SD,DOF,multiSets)
t
src<-'using namespace Rcpp;
 class Zero {
public:
     Zero(NumericVector sd_, NumericVector dof_, List geneSets_) : sd(sd_) ,dof(dof_), geneSets(geneSets_){}
NumericVector sumsigma( NumericVector sd, NumericVector dof, List geneSets ) {
NumericVector output(geneSets.size());
for(int i = 0 ; i < geneSets.size() ; i++) {
SEXP nn = geneSets[i];
NumericVector Indexes(nn);
NumericVector SD = sd[Indexes-1];
NumericVector DOF = dof[Indexes-1];
output[i]= sqrt(sum((SD*SD)*(DOF/(DOF-2))));
   }
 return output;
} //sumsigma function
NumericVector mindof( NumericVector dof, List geneSets ) {
NumericVector outputDof(geneSets.size());
for(int i = 0 ; i < geneSets.size(); i++){
SEXP mm = geneSets[i];
NumericVector Indexes(mm);
NumericVector DOF = dof[Indexes-1];
outputDof[i] = floor(min(DOF));
  }
return outputDof;
} //minDof
List sumSigma_minDof( NumericVector sd, NumericVector dof, List geneSets ) {
NumericVector output(geneSets.size());
NumericVector finalDof(geneSets.size());
for(int i = 0 ; i < geneSets.size() ; i++) {
SEXP nn = geneSets[i];
NumericVector Indexes(nn);
NumericVector SD = sd[Indexes-1];
NumericVector DOF = dof[Indexes-1];
output[i]= sqrt(sum((SD*SD)*(DOF/(DOF-2))));
finalDof[i] = floor(min(DOF));
   }
Rcpp::List out = Rcpp::List::create(Named("SumSigma") = output,
                                    Named("MinDof") = finalDof);
 return out;
} //sumsigma function
NumericVector sd, dof;
List geneSets;
};
RCPP_MODULE(Sigma_Dof){
class_<Zero>("Zero")
.constructor<NumericVector,NumericVector,List>()
.field("sd", &Zero::sd)
.field("dof", &Zero::dof)
.field("geneSets", &Zero::geneSets)
.method("sumsigma", &Zero::sumsigma)
.method("mindof", &Zero::mindof)
.method("sumSigma_minDof", &Zero::sumSigma_minDof)
;
}
'
fz<-cxxfunction(signature(),plugin="Rcpp",include=src)
zero_Module<-Module("Sigma_Dof",getDynLib(fz))
Zero<-zero_Module$Zero
